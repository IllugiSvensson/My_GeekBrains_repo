#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>
#include <malloc.h>

int main(int argc, char *argv[])
{
	int* a;
	int N;
	printf("Input N:");
	scanf("%i", &N);
	a =(int*) malloc(N * sizeof(int));
	int i;
	for (i = 0; i < N; i++)
	{
		printf("Input %d:", i);
		scanf("%d", &a[i]);
	}
	int value;
	printf("Input value for search:");
	scanf("%d", &value);
	i = 0;
	while (i < N && a[i] != value) i++;          // Алгоритм поиска

	if (i != N)
		printf("Index:%d Value:%d", i, a[i]);
	else
		printf("Value not found");

	return 0;
}

  int a[MaxN + 1];
...
    int value;
    printf("Input value for search:");
    scanf("%d", &value);
    a[N] = value;
    i = 0;
    while(a[i] != value) i++;
    if (i != N)
        printf("Index:%d Value:%d", i, a[i]);  // Алгоритм поиска
    else
        printf("Value not found");

    return 0;

 int value;
    printf("Input value for search:");
    scanf("%i",&value);
    int L = 0, R = N - 1;
    int m = L + (R – L) / 2;
    while(L <= R && a[m] != value)
    {
        if (a[m] < value) 
            L = m + 1;
        else 
            R = m - 1;
        m = L + (R - L) / 2;
    }
    if (a[m] == value)
        printf("Index:%d Value:%d", m, a[m]);
    else
        printf("Value not found");

int InterpolationSearch(int *a, int length, int value)
{
    int min = 0;
    int max = length - 1;
    while (min <= max)
    {
// Находим разделяющий элемент
        int mid = min + (max - min) * (value - a[min]) / (a[max] - a[min]);
        if (a[mid] == value) 
            return mid; 
        else if (a[mid] < value) 
            min = mid + 1; 
        else if (a[mid] > value) 
            max = mid - 1;               
    }
    return - 1   // Элемент не найден
}

// Определяем максимальный размер массива
#define MaxN 100
void swap(int *a, int *b) {
    int t = *a;
    *a = *b;
    *b = t;
}
// Распечатываем массив
void print(int N, int *a)
{
    int i;
    for(i = 0; i < N; i++)
        printf("%6i", a[i]);
    printf("\n");
}
int main(int argc, char *argv[]) {
    int a[MaxN];          // Создаём массив максимального размера
    int N;
    FILE *in;
    in = fopen("d:\\temp\\data.txt","r");
    fscanf(in, "%i", &N);
    int i;
    for(i = 0; i < N; i++)
    {
        fscanf(in, "%i", &a[i]);
    }
    fclose(in);
    puts("Array before sort");
    print(N, a);
    int j = 0;

    for(i = 0; I < N; i++)
        for(j = 0; j < N - 1; j++)
            if (a[j] > a[j + 1])
            {
                swap(&a[j], &a[j + 1]);
            }
    puts("Array after sort");
    print(N, a);

    return 0;
}


#include <stdio.h>
#define MaxN 100
void swap(int *a, int *b)
{
    int t = *a;
    *a = *b;
    *b = t;
}
void print(int N, int *a)
{
    int i;
    for(i = 0; i < N; i++)
        printf("%6i", a[i]);
    printf("\n");
}
int main(int argc, char *argv[])
{
    int a[MaxN];   // Создаём массив максимального размера
    int N;
    FILE *in;
    in = fopen("d:\\temp\\data.txt","r");
    fscanf(in, "%i", &N);
    int i;
    for(i = 0; i < N; i++)
    {
        fscanf(in, "%i", &a[i]);
    }
    fclose(in);
    puts("Array before sort");
    print(N, a);
    int j = 0;
    int jmin;
    for(i = 0; i < N; i++)
    {
        jmin = i;
        for(j = i + 1; j < N; j++)
            if (a[j] < a[jmin])
            {
                jmin = j;
            }
        swap(&a[i], &a[jmin]);
    }
    puts("Array after sort");
    print(N, a);
    return 0;
}

 for (int i = 0; i < N; i++)
    {
        int temp = a[i];	
        int j = i;
        while (j > 0 && a[j - 1] > temp)
        {			
            swap(&a[j], &a[j - 1]);
            j--;
        }
    }

int count = 0;                    // Вводим счётчик количества операций
    for (i = 0; i < N; i++)
        for (j = 0; j < N - 1; j++)
        {
            count++;   
            if (a[j] > a[j + 1])
            {
                count++; 
                swap(&a[j], &a[j + 1]);
            }
        }
    puts("Array after sort");
    Print(N, a);
    printf("Count:%d", count);      // Выводим счётчик на экран


#include <stdio.h>
#include <stdlib.h>
#include <sys/time.h>
#include <unistd.h>
#include <math.h>

#define MINDIM_M    1000
#define MINDIM_N    1000
#define MINDIM_K    1000
#define MAXDIM_M    3300
#define MAXDIM_N    3300
#define MAXDIM_K    3300
#define INC_M   100
#define INC_N   100
#define INC_K   100
#define MIN_T   1

struct timeval tv1, tv2, dtv;
struct timezone tz;

// Запоминаем в глобальных переменных текущее время
void time_start() 
{ 
    gettimeofday(&tv1, &tz); 
}
// Рассчитываем время, прошедшее с момента запуска time_start()
long time_stop()
{ 
    gettimeofday(&tv2, &tz);
    dtv.tv_sec = tv2.tv_sec - tv1.tv_sec;
    dtv.tv_usec = tv2.tv_usec - tv1.tv_usec;
    if(dtv.tv_usec<0) 
    { 
        dtv.tv_sec--; 
        dtv.tv_usec += 1000000; 
    }
    return dtv.tv_sec * 1000 + dtv.tv_usec / 1000;
}

double buffer1[MAXDIM_M*MAXDIM_N];
double buffer2[MAXDIM_M*MAXDIM_N];

void
initMatrix(size_t m, size_t n, double *A, size_t incRowA, size_t incColA) 
{
    for (size_t j = 0; j < n; ++j) 
        for (size_t i = 0; i < m; ++i)
            A[I * incRowA + j * incColA] = j * n + I + 1;
}

void printMatrix(size_t m, size_t n, const double *A, 
                 size_t incRowA, size_t incColA) 
{
    for (size_t i = 0; i < m; ++i) 
    { 
        printf("   ");
        for (size_t j = 0; j < n; ++j) 
            printf("%4.1lf ", A[i*incRowA+j*incColA]);
        printf("\n");
    }
    printf("\n");
}

int main() {
    printf("   M    N      t1      t2   t2/t1\n");
    printf("          col-maj row-maj\n");
    printf("=====================================\n");

    for (size_t m = MINDIM_M, n = MINDIM_N; m < MAXDIM_M && n < MAXDIM_N;
         m += INC_M, n += INC_N) 
    {
        size_t runs = 0;
        double t1 = 0;
        do {
            time_start();
            initMatrix(m, n, buffer1, 1, m);
            t1 += time_stop();
            ++runs;
        } while (t1 < MIN_T);
        t1 /= runs;

        runs = 0;
        double t2 = 0;
        do {
            time_start();
            initMatrix(m, n, buffer2, n, 1);
            t2 += time_stop();
            ++runs;
        } while (t2 < MIN_T);
        t2 /= runs;

        printf("%4d %4d %7.2lf %7.2lf %7.2lf\n", m, n, t1, t2, t2/t1);
    }
}
